version: 2.1

aliases:
  - &restore-yarn-cache
    key: v2-yarn-cache-{{ checksum "yarn.lock" }}

  - &save-yarn-cache
    paths:
      - ~/.yarn/berry/cache
    key: v2-yarn-cache-{{ checksum "yarn.lock" }}

  - &artifact_babel
    path: ~/babel/packages/babel-standalone/babel.js

  - &artifact_babel_sourcemap
    path: ~/babel/packages/babel-standalone/babel.js.map

  - &artifact_babel_min
    path: ~/babel/packages/babel-standalone/babel.min.js

  - &artifact_babel_min_sourcemap
    path: ~/babel/packages/babel-standalone/babel.min.js.map

executors:
  node-executor:
    docker:
      - image: cimg/node:current
    working_directory: ~/babel

jobs:
  build-standalone:
    executor: node-executor
    steps:
      - checkout
      - restore_cache: *restore-yarn-cache
        # Builds babel-standalone with the regular Babel config
        # test-ci-coverage doesn't test babel-standalone, as trying to gather coverage
      - run: NODE_ENV=production IS_PUBLISH=true make -j build-standalone-ci
        # data for a JS file that's several megabytes large is bound to fail. Here,
        # we just run the babel-standalone test separately.
      - run: yarn jest "\-standalone/test"
      - store_artifacts: *artifact_babel
      - store_artifacts: *artifact_babel_sourcemap
      - store_artifacts: *artifact_babel_min
      - store_artifacts: *artifact_babel_min_sourcemap
      - save_cache: *save-yarn-cache

workflows:
  version: 2
  build-standalone:
    jobs:
      - build-standalone
