{
  "version": 3,
  "names": [
    "Buffer",
    "Loc",
    "n",
    "t",
    "RecordAndTuplePluginOptions",
    "PipelineOperatorPluginOptions",
    "Opts",
    "jsescOptions",
    "generatorFunctions",
    "SourceMap",
    "charCodes",
    "SCIENTIFIC_NOTATION",
    "ZERO_DECIMAL_INTEGER",
    "NON_DECIMAL_LITERAL",
    "PURE_ANNOTATION_RE",
    "needsParens",
    "needsWhitespaceAfter",
    "needsWhitespaceBefore",
    "Format",
    "shouldPrintComment",
    "comment",
    "retainLines",
    "retainFunctionParens",
    "comments",
    "auxiliaryCommentBefore",
    "auxiliaryCommentAfter",
    "compact",
    "minified",
    "concise",
    "indent",
    "adjustMultilineComment",
    "style",
    "recordAndTupleSyntaxType",
    "jsescOption",
    "jsonCompatibleStrings",
    "topicToken",
    "decoratorsBeforeExport",
    "AddNewlinesOptions",
    "addNewlines",
    "leading",
    "node",
    "Node",
    "PrintSequenceOptions",
    "Partial",
    "statement",
    "PrintListOptions",
    "separator",
    "this",
    "Printer",
    "PrintJoinOptions",
    "iterator",
    "index",
    "constructor",
    "format",
    "map",
    "_buf",
    "_indentChar",
    "charCodeAt",
    "_indentRepeat",
    "length",
    "inForStatementInitCounter",
    "_printStack",
    "Array",
    "_indent",
    "_insideAux",
    "_parenPushNewlineState",
    "printed",
    "_noLineTerminator",
    "_printAuxAfterOnNextUserNode",
    "_printedComments",
    "Set",
    "Comment",
    "_endsWithInteger",
    "_endsWithWord",
    "generate",
    "ast",
    "print",
    "_maybeAddAuxComment",
    "get",
    "dedent",
    "semicolon",
    "force",
    "_appendChar",
    "_queue",
    "rightBrace",
    "removeLastSemicolon",
    "token",
    "space",
    "_space",
    "hasContent",
    "lastCp",
    "getLastChar",
    "lineFeed",
    "word",
    "str",
    "slash",
    "endsWith",
    "_append",
    "number",
    "Number",
    "isInteger",
    "test",
    "dot",
    "maybeNewline",
    "lastChar",
    "strFirst",
    "exclamationMark",
    "plusSign",
    "dash",
    "tokenChar",
    "char",
    "newline",
    "i",
    "charBeforeNewline",
    "endsWithCharAndNewline",
    "leftCurlyBrace",
    "colon",
    "j",
    "_newline",
    "removeTrailingNewline",
    "exactSource",
    "loc",
    "cb",
    "_catchUp",
    "source",
    "prop",
    "sourceWithOffset",
    "lineOffset",
    "columnOffset",
    "withSource",
    "_maybeAddParen",
    "_maybeIndent",
    "append",
    "_maybeAddParenChar",
    "appendChar",
    "queue",
    "firstChar",
    "queueIndentation",
    "_getIndent",
    "parenPushNewlineState",
    "len",
    "cha",
    "chaPost",
    "asterisk",
    "slice",
    "pos",
    "line",
    "count",
    "getCurrentLine",
    "printTerminatorless",
    "parent",
    "isLabel",
    "terminatorState",
    "noLineTerminator",
    "nodeType",
    "type",
    "oldConcise",
    "_compact",
    "printMethod",
    "Exclude",
    "DeprecatedAliases",
    "undefined",
    "ReferenceError",
    "JSON",
    "stringify",
    "name",
    "push",
    "oldInAux",
    "shouldPrintParens",
    "extra",
    "parenthesized",
    "_printLeadingComments",
    "bind",
    "_printTrailingComments",
    "pop",
    "enteredPositionlessNode",
    "_printAuxBeforeComment",
    "_printAuxAfterComment",
    "_printComment",
    "value",
    "getPossibleRaw",
    "StringLiteral",
    "NumericLiteral",
    "BigIntLiteral",
    "DecimalLiteral",
    "DirectiveLiteral",
    "JSXText",
    "raw",
    "rawValue",
    "printJoin",
    "nodes",
    "opts",
    "newlineOpts",
    "_printNewline",
    "call",
    "printAndIndentOnComments",
    "leadingComments",
    "printBlock",
    "Extract",
    "body",
    "Statement",
    "_printComments",
    "_getComments",
    "printInnerComments",
    "innerComments",
    "printSequence",
    "printList",
    "items",
    "commaSeparator",
    "lines",
    "needs",
    "Math",
    "min",
    "trailingComments",
    "skipNewLines",
    "ignore",
    "has",
    "add",
    "isBlockComment",
    "printNewLines",
    "lastCharCode",
    "leftSquareBracket",
    "val",
    "offset",
    "start",
    "column",
    "newlineRegex",
    "RegExp",
    "replace",
    "indentSize",
    "max",
    "getCurrentColumn",
    "repeat",
    "inlinePureAnnotation",
    "printAssertions",
    "assertions",
    "ImportAttribute",
    "Object",
    "assign",
    "prototype",
    "process",
    "env",
    "BABEL_8_BREAKING",
    "Noop",
    "GeneratorFunctions"
  ],
  "sources": [
    "fixtures/sourcemaps/real-world-babel-file2/input.ts"
  ],
  "sourcesContent": [
    "// From packages\\babel-generator\\src\\printer.ts\n\nimport Buffer from \"./buffer\";\nimport type { Loc } from \"./buffer\";\nimport * as n from \"./node\";\nimport type * as t from \"@babel/types\";\nimport type {\n  RecordAndTuplePluginOptions,\n  PipelineOperatorPluginOptions,\n} from \"@babel/parser\";\nimport type { Opts as jsescOptions } from \"jsesc\";\n\nimport * as generatorFunctions from \"./generators\";\nimport type SourceMap from \"./source-map\";\nimport * as charCodes from \"charcodes\";\n\nconst SCIENTIFIC_NOTATION = /e/i;\nconst ZERO_DECIMAL_INTEGER = /\\.0+$/;\nconst NON_DECIMAL_LITERAL = /^0[box]/;\nconst PURE_ANNOTATION_RE = /^\\s*[@#]__PURE__\\s*$/;\n\nconst { needsParens, needsWhitespaceAfter, needsWhitespaceBefore } = n;\n\nexport type Format = {\n  shouldPrintComment: (comment: string) => boolean;\n  retainLines: boolean;\n  retainFunctionParens: boolean;\n  comments: boolean;\n  auxiliaryCommentBefore: string;\n  auxiliaryCommentAfter: string;\n  compact: boolean | \"auto\";\n  minified: boolean;\n  concise: boolean;\n  indent: {\n    adjustMultilineComment: boolean;\n    style: string;\n  };\n  recordAndTupleSyntaxType: RecordAndTuplePluginOptions[\"syntaxType\"];\n  jsescOption: jsescOptions;\n  jsonCompatibleStrings?: boolean;\n  /**\n   * For use with the Hack-style pipe operator.\n   * Changes what token is used for pipe bodiesâ€™ topic references.\n   */\n  topicToken?: PipelineOperatorPluginOptions[\"topicToken\"];\n  /**\n   * @deprecated Removed in Babel 8\n   */\n  decoratorsBeforeExport?: boolean;\n};\n\ninterface AddNewlinesOptions {\n  addNewlines(leading: boolean, node: t.Node): number;\n}\n\ninterface PrintSequenceOptions extends Partial<AddNewlinesOptions> {\n  statement?: boolean;\n  indent?: boolean;\n}\n\ninterface PrintListOptions {\n  separator?: (this: Printer) => void;\n  statement?: boolean;\n  indent?: boolean;\n}\n\ntype PrintJoinOptions = PrintListOptions &\n  PrintSequenceOptions & {\n    iterator?: (node: t.Node, index: number) => void;\n  };\nclass Printer {\n  constructor(format: Format, map: SourceMap) {\n    this.format = format;\n    this._buf = new Buffer(map);\n\n    this._indentChar = format.indent.style.charCodeAt(0);\n    this._indentRepeat = format.indent.style.length;\n  }\n\n  declare format: Format;\n  inForStatementInitCounter: number = 0;\n\n  declare _buf: Buffer;\n  _printStack: Array<t.Node> = [];\n  _indent: number = 0;\n  _indentChar: number = 0;\n  _indentRepeat: number = 0;\n  _insideAux: boolean = false;\n  _parenPushNewlineState: { printed: boolean } | null = null;\n  _noLineTerminator: boolean = false;\n  _printAuxAfterOnNextUserNode: boolean = false;\n  _printedComments = new Set<t.Comment>();\n  _endsWithInteger = false;\n  _endsWithWord = false;\n\n  generate(ast: t.Node) {\n    this.print(ast);\n    this._maybeAddAuxComment();\n\n    return this._buf.get();\n  }\n\n  /**\n   * Increment indent size.\n   */\n\n  indent(): void {\n    if (this.format.compact || this.format.concise) return;\n\n    this._indent++;\n  }\n\n  /**\n   * Decrement indent size.\n   */\n\n  dedent(): void {\n    if (this.format.compact || this.format.concise) return;\n\n    this._indent--;\n  }\n\n  /**\n   * Add a semicolon to the buffer.\n   */\n\n  semicolon(force: boolean = false): void {\n    this._maybeAddAuxComment();\n    if (force) {\n      this._appendChar(charCodes.semicolon);\n    } else {\n      this._queue(charCodes.semicolon);\n    }\n  }\n\n  /**\n   * Add a right brace to the buffer.\n   */\n\n  rightBrace(): void {\n    if (this.format.minified) {\n      this._buf.removeLastSemicolon();\n    }\n    this.token(\"}\");\n  }\n\n  /**\n   * Add a space to the buffer unless it is compact.\n   */\n\n  space(force: boolean = false): void {\n    if (this.format.compact) return;\n\n    if (force) {\n      this._space();\n    } else if (this._buf.hasContent()) {\n      const lastCp = this.getLastChar();\n      if (lastCp !== charCodes.space && lastCp !== charCodes.lineFeed) {\n        this._space();\n      }\n    }\n  }\n\n  /**\n   * Writes a token that can't be safely parsed without taking whitespace into account.\n   */\n\n  word(str: string): void {\n    // prevent concatenating words and creating // comment out of division and regex\n    if (\n      this._endsWithWord ||\n      (str.charCodeAt(0) === charCodes.slash && this.endsWith(charCodes.slash))\n    ) {\n      this._space();\n    }\n\n    this._maybeAddAuxComment();\n    this._append(str, false);\n\n    this._endsWithWord = true;\n  }\n\n  /**\n   * Writes a number token so that we can validate if it is an integer.\n   */\n\n  number(str: string): void {\n    this.word(str);\n\n    // Integer tokens need special handling because they cannot have '.'s inserted\n    // immediately after them.\n    this._endsWithInteger =\n      Number.isInteger(+str) &&\n      !NON_DECIMAL_LITERAL.test(str) &&\n      !SCIENTIFIC_NOTATION.test(str) &&\n      !ZERO_DECIMAL_INTEGER.test(str) &&\n      str.charCodeAt(str.length - 1) !== charCodes.dot;\n  }\n\n  /**\n   * Writes a simple token.\n   */\n\n  token(str: string, maybeNewline = false): void {\n    // space is mandatory to avoid outputting <!--\n    // http://javascript.spec.whatwg.org/#comment-syntax\n    const lastChar = this.getLastChar();\n    const strFirst = str.charCodeAt(0);\n    if (\n      (lastChar === charCodes.exclamationMark && str === \"--\") ||\n      // Need spaces for operators of the same kind to avoid: `a+++b`\n      (strFirst === charCodes.plusSign && lastChar === charCodes.plusSign) ||\n      (strFirst === charCodes.dash && lastChar === charCodes.dash) ||\n      // Needs spaces to avoid changing '34' to '34.', which would still be a valid number.\n      (strFirst === charCodes.dot && this._endsWithInteger)\n    ) {\n      this._space();\n    }\n\n    this._maybeAddAuxComment();\n    this._append(str, maybeNewline);\n  }\n\n  tokenChar(char: number): void {\n    // space is mandatory to avoid outputting <!--\n    // http://javascript.spec.whatwg.org/#comment-syntax\n    const lastChar = this.getLastChar();\n    if (\n      // Need spaces for operators of the same kind to avoid: `a+++b`\n      (char === charCodes.plusSign && lastChar === charCodes.plusSign) ||\n      (char === charCodes.dash && lastChar === charCodes.dash) ||\n      // Needs spaces to avoid changing '34' to '34.', which would still be a valid number.\n      (char === charCodes.dot && this._endsWithInteger)\n    ) {\n      this._space();\n    }\n\n    this._maybeAddAuxComment();\n    this._appendChar(char);\n  }\n\n  /**\n   * Add a newline (or many newlines), maintaining formatting.\n   */\n\n  newline(i: number = 1): void {\n    if (this.format.retainLines || this.format.compact) return;\n\n    if (this.format.concise) {\n      this.space();\n      return;\n    }\n\n    const charBeforeNewline = this.endsWithCharAndNewline();\n    // never allow more than two lines\n    if (charBeforeNewline === charCodes.lineFeed) return;\n\n    if (\n      charBeforeNewline === charCodes.leftCurlyBrace ||\n      charBeforeNewline === charCodes.colon\n    ) {\n      i--;\n    }\n    if (i <= 0) return;\n\n    for (let j = 0; j < i; j++) {\n      this._newline();\n    }\n  }\n\n  endsWith(char: number): boolean {\n    return this.getLastChar() === char;\n  }\n\n  getLastChar(): number {\n    return this._buf.getLastChar();\n  }\n\n  endsWithCharAndNewline(): number {\n    return this._buf.endsWithCharAndNewline();\n  }\n\n  removeTrailingNewline(): void {\n    this._buf.removeTrailingNewline();\n  }\n\n  exactSource(loc: Loc | undefined, cb: () => void) {\n    this._catchUp(\"start\", loc);\n\n    this._buf.exactSource(loc, cb);\n  }\n\n  source(prop: \"start\" | \"end\", loc: Loc | undefined): void {\n    this._catchUp(prop, loc);\n\n    this._buf.source(prop, loc);\n  }\n\n  sourceWithOffset(\n    prop: \"start\" | \"end\",\n    loc: Loc | undefined,\n    lineOffset: number,\n    columnOffset: number,\n  ): void {\n    this._catchUp(prop, loc);\n\n    this._buf.sourceWithOffset(prop, loc, lineOffset, columnOffset);\n  }\n\n  withSource(\n    prop: \"start\" | \"end\",\n    loc: Loc | undefined,\n    cb: () => void,\n  ): void {\n    this._catchUp(prop, loc);\n\n    this._buf.withSource(prop, loc, cb);\n  }\n\n  _space(): void {\n    this._queue(charCodes.space);\n  }\n\n  _newline(): void {\n    this._queue(charCodes.lineFeed);\n  }\n\n  _append(str: string, maybeNewline: boolean): void {\n    this._maybeAddParen(str);\n    this._maybeIndent(str.charCodeAt(0));\n\n    this._buf.append(str, maybeNewline);\n\n    this._endsWithWord = false;\n    this._endsWithInteger = false;\n  }\n\n  _appendChar(char: number): void {\n    this._maybeAddParenChar(char);\n    this._maybeIndent(char);\n\n    this._buf.appendChar(char);\n\n    this._endsWithWord = false;\n    this._endsWithInteger = false;\n  }\n\n  _queue(char: number) {\n    this._maybeAddParenChar(char);\n    this._maybeIndent(char);\n\n    this._buf.queue(char);\n\n    this._endsWithWord = false;\n    this._endsWithInteger = false;\n  }\n\n  _maybeIndent(firstChar: number): void {\n    // we've got a newline before us so prepend on the indentation\n    if (\n      this._indent &&\n      firstChar !== charCodes.lineFeed &&\n      this.endsWith(charCodes.lineFeed)\n    ) {\n      this._buf.queueIndentation(this._indentChar, this._getIndent());\n    }\n  }\n\n  _maybeAddParenChar(char: number): void {\n    // see startTerminatorless() instance method\n    const parenPushNewlineState = this._parenPushNewlineState;\n    if (!parenPushNewlineState) return;\n\n    // This function does two things:\n    // - If needed, prints a parenthesis\n    // - If the currently printed string removes the need for the paren,\n    //   it resets the _parenPushNewlineState field.\n    //   Almost everything removes the need for a paren, except for\n    //   comments and whitespaces.\n\n    if (char === charCodes.space) {\n      // Whitespaces only, the parentheses might still be needed.\n      return;\n    }\n\n    // Check for newline or comment.\n    if (char !== charCodes.lineFeed) {\n      this._parenPushNewlineState = null;\n      return;\n    }\n\n    this.token(\"(\");\n    this.indent();\n    parenPushNewlineState.printed = true;\n  }\n\n  _maybeAddParen(str: string): void {\n    // see startTerminatorless() instance method\n    const parenPushNewlineState = this._parenPushNewlineState;\n    if (!parenPushNewlineState) return;\n\n    // This function does two things:\n    // - If needed, prints a parenthesis\n    // - If the currently printed string removes the need for the paren,\n    //   it resets the _parenPushNewlineState field.\n    //   Almost everything removes the need for a paren, except for\n    //   comments and whitespaces.\n\n    const len = str.length;\n\n    let i;\n    for (i = 0; i < len && str.charCodeAt(i) === charCodes.space; i++) continue;\n    if (i === len) {\n      // Whitespaces only, the parentheses might still be needed.\n      return;\n    }\n\n    // Check for newline or comment.\n    const cha = str.charCodeAt(i);\n    if (cha !== charCodes.lineFeed) {\n      if (\n        // This is not a comment (it doesn't start with /)\n        cha !== charCodes.slash ||\n        // This is not a comment (it's a / operator)\n        i + 1 === len\n      ) {\n        // After a normal token, the parentheses aren't needed anymore\n        this._parenPushNewlineState = null;\n        return;\n      }\n\n      const chaPost = str.charCodeAt(i + 1);\n\n      if (chaPost === charCodes.asterisk) {\n        // This is a block comment\n\n        if (PURE_ANNOTATION_RE.test(str.slice(i + 2, len - 2))) {\n          // We avoid printing newlines after #__PURE__ comments (we treat\n          // then as unary operators), but we must keep the old\n          // parenPushNewlineState because, if a newline was forbidden, it is\n          // still forbidden after the comment.\n          return;\n        }\n\n        // NOTE: code flow continues from here to after these if/elses\n      } else if (chaPost !== charCodes.slash) {\n        // This is neither a block comment, nor a line comment.\n        // After a normal token, the parentheses aren't needed anymore\n        this._parenPushNewlineState = null;\n        return;\n      }\n    }\n\n    this.token(\"(\");\n    this.indent();\n    parenPushNewlineState.printed = true;\n  }\n\n  _catchUp(prop: \"start\" | \"end\", loc?: Loc) {\n    if (!this.format.retainLines) return;\n\n    // catch up to this nodes newline if we're behind\n    const pos = loc ? loc[prop] : null;\n    if (pos?.line != null) {\n      const count = pos.line - this._buf.getCurrentLine();\n\n      for (let i = 0; i < count; i++) {\n        this._newline();\n      }\n    }\n  }\n\n  /**\n   * Get the current indent.\n   */\n\n  _getIndent(): number {\n    return this._indentRepeat * this._indent;\n  }\n\n  printTerminatorless(node: t.Node, parent: t.Node, isLabel: boolean) {\n    /**\n     * Set some state that will be modified if a newline has been inserted before any\n     * non-space characters.\n     *\n     * This is to prevent breaking semantics for terminatorless separator nodes. eg:\n     *\n     *   return foo;\n     *\n     * returns `foo`. But if we do:\n     *\n     *   return\n     *   foo;\n     *\n     *  `undefined` will be returned and not `foo` due to the terminator.\n     */\n    if (isLabel) {\n      this._noLineTerminator = true;\n      this.print(node, parent);\n      this._noLineTerminator = false;\n    } else {\n      const terminatorState = {\n        printed: false,\n      };\n      this._parenPushNewlineState = terminatorState;\n      this.print(node, parent);\n      /**\n       * Print an ending parentheses if a starting one has been printed.\n       */\n      if (terminatorState.printed) {\n        this.dedent();\n        this.newline();\n        this.token(\")\");\n      }\n    }\n  }\n\n  print(node: t.Node | null, parent?: t.Node, noLineTerminator?: boolean) {\n    if (!node) return;\n\n    const nodeType = node.type;\n    const format = this.format;\n\n    const oldConcise = format.concise;\n    if (\n      // @ts-expect-error document _compact AST properties\n      node._compact\n    ) {\n      format.concise = true;\n    }\n\n    const printMethod =\n      this[\n        nodeType as Exclude<\n          t.Node[\"type\"],\n          // removed\n          | \"Noop\"\n          // renamed\n          | t.DeprecatedAliases[\"type\"]\n        >\n      ];\n    if (printMethod === undefined) {\n      throw new ReferenceError(\n        `unknown node of type ${JSON.stringify(\n          nodeType,\n        )} with constructor ${JSON.stringify(node.constructor.name)}`,\n      );\n    }\n\n    this._printStack.push(node);\n\n    const oldInAux = this._insideAux;\n    this._insideAux = node.loc == undefined;\n    this._maybeAddAuxComment(this._insideAux && !oldInAux);\n\n    let shouldPrintParens: boolean;\n    if (\n      format.retainFunctionParens &&\n      nodeType === \"FunctionExpression\" &&\n      node.extra &&\n      node.extra.parenthesized\n    ) {\n      shouldPrintParens = true;\n    } else {\n      shouldPrintParens = needsParens(node, parent, this._printStack);\n    }\n    if (shouldPrintParens) this.token(\"(\");\n\n    this._printLeadingComments(node);\n\n    const loc = nodeType === \"Program\" || nodeType === \"File\" ? null : node.loc;\n\n    this.exactSource(loc, printMethod.bind(this, node, parent));\n\n    if (noLineTerminator && !this._noLineTerminator) {\n      this._noLineTerminator = true;\n      this._printTrailingComments(node);\n      this._noLineTerminator = false;\n    } else {\n      this._printTrailingComments(node);\n    }\n\n    if (shouldPrintParens) this.token(\")\");\n\n    // end\n    this._printStack.pop();\n\n    format.concise = oldConcise;\n    this._insideAux = oldInAux;\n  }\n\n  _maybeAddAuxComment(enteredPositionlessNode?: boolean) {\n    if (enteredPositionlessNode) this._printAuxBeforeComment();\n    if (!this._insideAux) this._printAuxAfterComment();\n  }\n\n  _printAuxBeforeComment() {\n    if (this._printAuxAfterOnNextUserNode) return;\n    this._printAuxAfterOnNextUserNode = true;\n\n    const comment = this.format.auxiliaryCommentBefore;\n    if (comment) {\n      this._printComment({\n        type: \"CommentBlock\",\n        value: comment,\n      });\n    }\n  }\n\n  _printAuxAfterComment() {\n    if (!this._printAuxAfterOnNextUserNode) return;\n    this._printAuxAfterOnNextUserNode = false;\n\n    const comment = this.format.auxiliaryCommentAfter;\n    if (comment) {\n      this._printComment({\n        type: \"CommentBlock\",\n        value: comment,\n      });\n    }\n  }\n\n  getPossibleRaw(\n    node:\n      | t.StringLiteral\n      | t.NumericLiteral\n      | t.BigIntLiteral\n      | t.DecimalLiteral\n      | t.DirectiveLiteral\n      | t.JSXText,\n  ): string | undefined {\n    const extra = node.extra;\n    if (\n      extra &&\n      extra.raw != null &&\n      extra.rawValue != null &&\n      node.value === extra.rawValue\n    ) {\n      // @ts-expect-error: The extra.raw of these AST node types must be a string\n      return extra.raw;\n    }\n  }\n\n  printJoin(\n    nodes: Array<t.Node> | undefined | null,\n    parent: t.Node,\n    opts: PrintJoinOptions = {},\n  ) {\n    if (!nodes?.length) return;\n\n    if (opts.indent) this.indent();\n\n    const newlineOpts: AddNewlinesOptions = {\n      addNewlines: opts.addNewlines,\n    };\n\n    const len = nodes.length;\n    for (let i = 0; i < len; i++) {\n      const node = nodes[i];\n      if (!node) continue;\n\n      if (opts.statement) this._printNewline(true, node, parent, newlineOpts);\n\n      this.print(node, parent);\n\n      if (opts.iterator) {\n        opts.iterator(node, i);\n      }\n\n      if (opts.separator && i < len - 1) {\n        opts.separator.call(this);\n      }\n\n      if (opts.statement) this._printNewline(false, node, parent, newlineOpts);\n    }\n\n    if (opts.indent) this.dedent();\n  }\n\n  printAndIndentOnComments(node: t.Node, parent: t.Node) {\n    const indent = node.leadingComments && node.leadingComments.length > 0;\n    if (indent) this.indent();\n    this.print(node, parent);\n    if (indent) this.dedent();\n  }\n\n  printBlock(parent: Extract<t.Node, { body: t.Statement }>) {\n    const node = parent.body;\n\n    if (node.type !== \"EmptyStatement\") {\n      this.space();\n    }\n\n    this.print(node, parent);\n  }\n\n  _printTrailingComments(node: t.Node) {\n    this._printComments(this._getComments(false, node));\n  }\n\n  _printLeadingComments(node: t.Node) {\n    this._printComments(\n      this._getComments(true, node),\n      // Don't add leading/trailing new lines to #__PURE__ annotations\n      true,\n    );\n  }\n\n  printInnerComments(node: t.Node, indent = true) {\n    if (!node.innerComments?.length) return;\n    if (indent) this.indent();\n    this._printComments(node.innerComments);\n    if (indent) this.dedent();\n  }\n\n  printSequence(\n    nodes: t.Node[],\n    parent: t.Node,\n    opts: PrintSequenceOptions = {},\n  ) {\n    opts.statement = true;\n    return this.printJoin(nodes, parent, opts);\n  }\n\n  printList(items: t.Node[], parent: t.Node, opts: PrintListOptions = {}) {\n    if (opts.separator == null) {\n      opts.separator = commaSeparator;\n    }\n\n    return this.printJoin(items, parent, opts);\n  }\n\n  _printNewline(\n    leading: boolean,\n    node: t.Node,\n    parent: t.Node,\n    opts: AddNewlinesOptions,\n  ) {\n    // Fast path since 'this.newline' does nothing when not tracking lines.\n    if (this.format.retainLines || this.format.compact) return;\n\n    // Fast path for concise since 'this.newline' just inserts a space when\n    // concise formatting is in use.\n    if (this.format.concise) {\n      this.space();\n      return;\n    }\n\n    let lines = 0;\n    // don't add newlines at the beginning of the file\n    if (this._buf.hasContent()) {\n      if (!leading) lines++; // always include at least a single line after\n      if (opts.addNewlines) lines += opts.addNewlines(leading, node) || 0;\n\n      const needs = leading ? needsWhitespaceBefore : needsWhitespaceAfter;\n      if (needs(node, parent)) lines++;\n    }\n\n    this.newline(Math.min(2, lines));\n  }\n\n  _getComments(leading: boolean, node: t.Node) {\n    // Note, we use a boolean flag here instead of passing in the attribute name as it is faster\n    // because this is called extremely frequently.\n    return (\n      (node && (leading ? node.leadingComments : node.trailingComments)) || null\n    );\n  }\n\n  _printComment(comment: t.Comment, skipNewLines?: boolean) {\n    // Some plugins (such as flow-strip-types) use this to mark comments as removed using the AST-root 'comments' property,\n    // where they can't manually mutate the AST node comment lists.\n    if (comment.ignore) return;\n\n    if (this._printedComments.has(comment)) return;\n\n    if (!this.format.shouldPrintComment(comment.value)) return;\n\n    this._printedComments.add(comment);\n\n    const isBlockComment = comment.type === \"CommentBlock\";\n\n    // Add a newline before and after a block comment, unless explicitly\n    // disallowed\n    const printNewLines =\n      isBlockComment && !skipNewLines && !this._noLineTerminator;\n\n    if (printNewLines && this._buf.hasContent()) this.newline(1);\n\n    const lastCharCode = this.getLastChar();\n    if (\n      lastCharCode !== charCodes.leftSquareBracket &&\n      lastCharCode !== charCodes.leftCurlyBrace\n    ) {\n      this.space();\n    }\n\n    let val;\n    let maybeNewline = false;\n    if (isBlockComment) {\n      val = `/*${comment.value}*/`;\n      if (this.format.indent.adjustMultilineComment) {\n        const offset = comment.loc?.start.column;\n        if (offset) {\n          const newlineRegex = new RegExp(\"\\\\n\\\\s{1,\" + offset + \"}\", \"g\");\n          val = val.replace(newlineRegex, \"\\n\");\n        }\n\n        const indentSize = Math.max(\n          this._getIndent(),\n          this.format.retainLines ? 0 : this._buf.getCurrentColumn(),\n        );\n        val = val.replace(/\\n(?!$)/g, `\\n${\" \".repeat(indentSize)}`);\n\n        maybeNewline = true;\n      }\n    } else if (!this._noLineTerminator) {\n      val = `//${comment.value}\\n`;\n      maybeNewline = true;\n    } else {\n      val = `/*${comment.value}*/`;\n    }\n\n    // Avoid creating //* comments\n    if (this.endsWith(charCodes.slash)) this._space();\n\n    this.withSource(\n      \"start\",\n      comment.loc,\n      this._append.bind(this, val, maybeNewline),\n    );\n\n    if (printNewLines) this.newline(1);\n  }\n\n  _printComments(\n    comments?: readonly t.Comment[],\n    inlinePureAnnotation?: boolean,\n  ) {\n    if (!comments?.length) return;\n\n    if (\n      inlinePureAnnotation &&\n      comments.length === 1 &&\n      PURE_ANNOTATION_RE.test(comments[0].value)\n    ) {\n      this._printComment(\n        comments[0],\n        // Keep newlines if the comment marks a standalone call\n        this._buf.hasContent() && !this.endsWith(charCodes.lineFeed),\n      );\n    } else {\n      for (const comment of comments) {\n        this._printComment(comment);\n      }\n    }\n  }\n  // todo(flow->ts): was Node\n  printAssertions(node: Extract<t.Node, { assertions?: t.ImportAttribute[] }>) {\n    if (node.assertions?.length) {\n      this.space();\n      this.word(\"assert\");\n      this.space();\n      this.token(\"{\");\n      this.space();\n      this.printList(node.assertions, node);\n      this.space();\n      this.token(\"}\");\n    }\n  }\n}\n\n// Expose the node type functions and helpers on the prototype for easy usage.\nObject.assign(Printer.prototype, generatorFunctions);\n\nif (!process.env.BABEL_8_BREAKING) {\n  // @ts-ignore(Babel 7 vs Babel 8) Babel 7 has Noop print method\n  Printer.prototype.Noop = function Noop(this: Printer) {};\n}\n\ntype GeneratorFunctions = typeof generatorFunctions;\ninterface Printer extends GeneratorFunctions {}\nexport default Printer;\n\nfunction commaSeparator(this: Printer) {\n  this.token(\",\");\n  this.space();\n}"
  ],
  "mappings": "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"
}